version: '3.8'

services:
  # Frontend - Next.js Application
  frontend:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8080
    depends_on:
      - backend
      - postgres
    networks:
      - dna-network
    restart: unless-stopped

  # Backend API (assuming you have a backend service)
  backend:
    image: your-backend-image:latest  # Replace with your backend image
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://dna_user:dna_password@postgres:5432/dna_community
      - NODE_ENV=production
    depends_on:
      - postgres
    networks:
      - dna-network
    restart: unless-stopped

  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=dna_community
      - POSTGRES_USER=dna_user
      - POSTGRES_PASSWORD=dna_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Optional: Initial schema
    ports:
      - "5432:5432"
    networks:
      - dna-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dna-network
    restart: unless-stopped

  # Nginx as reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl  # SSL certificates
    depends_on:
      - frontend
      - backend
    networks:
      - dna-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  dna-network:
    driver: bridge